/*
 *                       Written by JoungKyun.Kim
 *            Copyright (c) 2011 JoungKyun.Kim <http://oops.org>
 *
 * -----------------------------------------------------------------------------
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *
 *     * Neither the name of JoungKyun.Kim nor the url of oops.org
 *       nor the names of their contributors may be used to endorse or
 *       promote products derived from this software without specific prior
 *       written permission. 
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * -----------------------------------------------------------------------------
 *  This file is part of olibc.
 */

/** 
 * @file	oc_type.h
 * @brief	Common header file
 *
 * This file includes common header files and declare
 * data structures, and defination macro.
 *
 * @author	JoungKyun.Kim <http://oops.org>
 * $Date: 2011-04-09 16:03:05 $
 * $Revision: 1.2 $
 * @attention	Copyright (c) 2011 JoungKyun.Kim all rights reserved.
 */
/* $Id: oc_type.h.in,v 1.2 2011-04-09 16:03:05 oops Exp $ */

#ifndef OC_TYPE_H
#define OC_TYPE_H

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <unistd.h>
#include <limits.h>
#include <stdint.h>

# ifdef __cplusplus
extern "C"
{
# endif

/************ architecure **********/
#if defined(__x86_64) || defined(__amd64)
	#ifndef __x86_64__
		#define __x86_64__	1
	#endif
#endif
/************ architecure **********/

/************ endign ***************/
#if defined(linux)
	#if defined __STRICT_ANSI__
		#undef __STRICT_ANSI__
		#include <endian.h>
		#define __STRICT_ANSI__
	#else
		#include <endian.h>
	#endif
#elif defined(__FreeBSD__)
	#include <machine/endian.h>
#elif defined(__NetBSD__) || defined(__OpenBSD__)
	#include <sys/types.h>
#endif

#ifndef BYTE_ORDER
	#ifdef _BYTE_ORDER
		#define BYTE_ORDER _BYTE_ORDER
		#define BIG_ENDIAN _BIG_ENDIAN
		#define LITTLE_ENDIAN _LITTLE_ENDIAN
	#elif defined (__BYTE_ORDER)
		#define BYTE_ORDER __BYTE_ORDER
		#define BIG_ENDIAN __BIG_ENDIAN
		#define LITTLE_ENDIAN __LITTLE_ENDIAN
	#endif
#endif
/************ endign ***************/

#ifndef null
#define null NULL
#endif

#ifndef OLIBC_CONFIG_H
	/* Define to 1 if you have the <stdbool.h> header file. */
	#undef HAVE_STDBOOL_H
#endif

typedef unsigned char UChar;    //!< unsigned char
typedef const char CChar;       //!< const char
typedef const UChar UCChar;     //!< const unsigned char
typedef uint16_t UShort;        //!< unsigned short
typedef const uint16_t CShort;  //!< const short
typedef const uint16_t UCShort; //!< const unsigned short
typedef uint32_t UInt;          //!< unsigned int
typedef const int32_t CInt;     //!< const int
typedef const uint32_t UCInt;   //!< const unsigned int

typedef int32_t Long;           //!< 4byte(32bit) integer
typedef int32_t Long32;         //!< 4byte(32bit) integer
typedef int64_t Long64;         //!< 8byte(64bit) integer
typedef uint32_t ULong;         //!< 4byte(32bit) unsigned integer
typedef uint32_t ULong32;       //!< 4byte(32bit) unsigned integer
typedef uint64_t ULong64;       //!< 8byte(64bit) unsigned integer

//! 64bit integer structure on 32bit
typedef struct {
#if BYTE_ORDER == LITTLE_ENDIAN
	ULong32 low;                //!< low 32bit of 64bit ingeger
	ULong32 high;               //!< high 32bit of 64bit ingeger
#else
	ULong32 high;
	ULong32 low;
#endif
} Bit64;

#ifdef HAVE_STDBOOL_H
	#include <stdbool.h>
#else
	#define _STDBOOL_H
	#ifndef __cplusplus

		#define bool    _Bool
		#define true    1
		#define false   0

	#else /* __cplusplus */

		#define _Bool   bool
		#define bool    bool
		#define false   false
		#define true    true

	#endif
	/* Signal that all the definitions are present.  */
	#define __bool_true_false_are_defined   1
#endif

/*
 * Definition about memory api
 */

#define oc_error_debug(...) \
	{ \
		fprintf (stderr, "DEBUG: %s(%s:%d): ", __func__, __FILE__, __LINE__); \
		fprintf (stderr, __VA_ARGS__); \
	};

#ifdef __OCDEBUG__
	#define OC_DEBUG(...) oc_error_debug (__VA_ARGS__)
	#define oc_error(...) oc_error_debug ( __VA_ARGS__)
#else
	#define OC_DEBUG(...)
	#define oc_error(...) \
		{ \
			fprintf (stderr, "OC ERROR: "); \
			fprintf (stderr, __VA_ARGS__); \
		}
#endif

#ifdef __OCMEMDEBUG__
	#define OC_MEM_DEBUG(...) oc_error_debug (__VA_ARGS__)
#else
	#define OC_MEM_DEBUG(...)
#endif

#define ofree(v) \
	{ \
		OC_MEM_DEBUG ("Memory free%s\n", v == NULL ? ": NULL" : ""); \
		if ( v != NULL ) { \
			free (v); \
			v = NULL; \
		} \
	}

#define oc_malloc(v, size) \
	{ \
		OC_MEM_DEBUG("Memory allocation\n"); \
		v = malloc (size); \
	}
	
#define oc_realloc(v, size) \
	{ \
		void * ptr_oc_ival; \
		OC_MEM_DEBUG("Memory reallocation\n"); \
		if ( (ptr_oc_ival = realloc (v, size)) == NULL ) { \
			ofree (v); \
			v = NULL; \
		} else { \
			v = ptr_oc_ival; \
		} \
	}

#define oc_strdup(v, val, size) \
	{ \
		OC_DEBUG ("strdup add size : %d + %d\n", size, (size < 4) ? 4 : 1); \
		oc_malloc(v, size + ((size < 4) ? 4 : 1)); \
		if ( v != NULL ) { \
			memcpy (v, val, size); \
			memset (v + size, 0, 1); \
		} \
	}

#define OC_DEF_EXIT    0
#define OC_DEF_RETURN  1
#define OC_DEF_MALLOC  0
#define OC_DEF_REALLOC 1

#define oc_malloc_originate(type, v, size, ret, result) \
	{ \
		if ( type == OC_DEF_REALLOC ) { oc_realloc (v, size); } \
		else { oc_malloc (v, size); } \
		if ( v == NULL ) { \
			oc_error ("%s: memory %sallocation failed\n", __func__, type ? "re" : ""); \
			if ( result == OC_DEF_RETURN ) return ret; \
			exit (1); \
		} \
		if ( type == OC_DEF_MALLOC ) { memset (v, 0, size); } \
	}

/*
 * v -> allocated variable
 * size -> allocated size
 * ret -> if failed allocat, return value
 */
#define oc_malloc_r(v, size, ret) \
	oc_malloc_originate (OC_DEF_MALLOC, v, size, ret, OC_DEF_RETURN)

#define oc_realloc_r(v, size, ret) \
	oc_malloc_originate (OC_DEF_REALLOC, v, size, ret, OC_DEF_RETURN)

#define oc_malloc_die(v, size) \
	oc_malloc_originate (OC_DEF_MALLOC, v, size, ret, OC_DEF_EXIT)

#define oc_realloc_die(v, size) \
	oc_malloc_originate (OC_DEF_REALLOC, v, size, ret, OC_DEF_EXIT)

#define oc_strdup_originate(v, data, ret, result) \
	{ \
		oc_strdup (v, data, strlen (data)); \
		if ( v == NULL ) { \
			if ( result == OC_DEF_RETURN ) \
				return ret; \
			exit (1); \
		} \
	}

#define oc_strdup_r(v, data, ret) \
		 oc_strdup_originate (v, data, ret, OC_DEF_RETURN)

#define oc_strdup_e(v, data, ret) \
		 oc_strdup_originate (v, data, ret, OC_DEF_EXIT)


#define oc_safe_cpy(dst, src, size) \
	{ \
		UInt cpylen_oc_ival; \
		cpylen_oc_ival = strlen (src); \
		cpylen_oc_ival = (cpylen_oc_ival > (size-1)) ? size - 1 : cpylen_oc_ival; \
		memmove (dst, src, cpylen_oc_ival); \
		memset (dst + cpylen_oc_ival, 0, 1); \
	}

#define oc_safe_bcpy(dst, src, srclen, size) \
	{ \
		size = (srclen > (size-1)) ? size - 1 : srclen; \
		memmove (dst, src, size); \
		memset (dst + size, 0, 1); \
	}

# ifdef __cplusplus
}
# endif

#endif
