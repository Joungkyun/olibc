.TH split(3) 2011-03-18 "Linux Manpage" "OOPS Library's Manual"
.\" Process with
.\" nroff -man split.3
.\" 2011-03-18 JoungKyun Kim <htt://oops.org>
.\" $Id: split.3,v 1.11 2011-03-24 16:11:40 oops Exp $
.SH NAME
split \- Split a string by string.
.br
join \- Join array elements with a string.

.SH SYNOPSIS
.B #include <olibc/libstring.h>
.sp
.BI "char ** split (const char * stream, int * argc, const char * delimiter);"
.br
.BI "char * join (const char * glue, const char ** sep);"

.SH "Link library"
.B \-loc
or
.B \-lolibc
.br

.B libolibc.so
and
.B libolibc.a
include
.B "LGPL2 symbols,"
so links this library, your object or binary is follows LGPL2.
If you don't need idn library and, don't want LGPL 2 effects,
use
.B liboc.so
or
.B liboc.a
that follows BSD license.

.SH DESCRIPTION
The
.BI split()
api returns an array of strings, each of which is a substring of string
formed by splitting it on boundaries formed by the string delimiter.

.TP
.B stream
.br
The input string.

.TP
.B argc
.br
Number of return arraies

.TP
.B delimiter
.br
The boundary string.

.PP
The
.BI join()
api join array elements with a glue string.

.TP
.B glue
.br
Connected string. If set null, glue has empty string internally.

.TP
.B sep
.br
 The array of strings to join.

.SH "RETURN VALUE"
The
.BI split()
api returns the pointer of string array. If delimiter or src is an
empty string (""),
.BI split()
api will return null.

The last element of return array is null terminating, and each
element's front or backend white spaces are removed.

When occurs internal error,
.BI split()
returns null. If the return string array pointer is not null,
the caller should deallocate this buffer using
.BI ofree_array().

The
.BI join()
api returns the point of string.

When occurs internal error,
.BI join()
returns null. If the return string pointer is not null,
the caller should deallocate this buffer using
.BI free().

.SH EXAMPLE
.nf
#include <olibc/libstring.h>
#include <olibc/libarg.h> // for ofree_array()

int main (void) {
    char ** sep;
    char *a = "abcA abcAabc ";
    char *j;
    int i, j;

    sep = split (a, &i, "A");

    for (j = 0; j < i; j++) {
        printf ("** %s\\n", sep[j]);
    }

    j = join ("A", sep);
    printf ("%s\n", j);

    free (j);
    ofree_array (sep);
    return 0;
}
.fi

.SH "SEE ALSO"
ofree_array(3)

.SH AUTHOR
JoungKyun.Kim <http://oops.org>

.SH BUGS
Please report bug on QnA bulletin board on http://oops.org/
