.TH split(3) 2011-03-18 "Linux Manpage" "OOPS Library's Manual"
.\" Process with
.\" nroff -man split.3
.\" 2011-03-18 JoungKyun Kim <htt://oops.org>
.\" $Id: split.3,v 1.9 2011-03-18 05:53:44 oops Exp $
.SH NAME
split \- Split a string by string.

.SH SYNOPSIS
.B #include <olibc/libarg.h>
.sp
.BI "char ** split (const char * stream, int * argc, const char * delimiter);"

.SH "Link library"
.B \-loc
or
.B \-lolibc
.br

.B libolibc.so
and
.B libolibc.a
include
.B "LGPL2 symbols,"
so links this library, your object or binary is follows LGPL2.
If you don't need idn library and, don't want LGPL 2 effects,
use
.B liboc.so
or
.B liboc.a
that follows BSD license.

.SH DESCRIPTION
Returns an array of strings, each of which is a substring of string
formed by splitting it on boundaries formed by the string delimiter.

If already escaped, escaped character is skip escaping.

.TP
.B stream
.br
The input string.

.TP
.B argc
.br
Number of return arraies

.TP
.B delimiter
.br
The boundary string.

.SH "RETURN VALUE"
If delimiter or src is an empty string (""),
.BI split()
api will return null.

The last element of return array is null terminating, and each
element's front or backend white spaces are removed.

When occurs internal error,
.BI split()
returns null. If the return string array pointer is not null,
the caller should deallocate this buffer using
.BI ofree_array().

.SH EXAMPLE
.nf
#include <olibc/libarg.h>

int main (void) {
    char ** sep;
    char *a = "abcA abcAabc ";
    int i, j;

    sep = split (a, &i, "A");

    for (j = 0; j < i; j++) {
        printf ("** %s\\n", sep[j]);
    }

    ofree_array (sep);
    return 0;
}
.fi

.SH "SEE ALSO"
ofree_array(3)

.SH AUTHOR
JoungKyun.Kim <http://oops.org>

.SH BUGS
Please report bug on QnA bulletin board on http://oops.org/
