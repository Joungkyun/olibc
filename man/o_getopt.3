.TH o_getopt(3) 2011-03-05 "Linux Manpage" "OOPS C Library's Manual"
.\" Process with
.\" nroff -man o_getopt.3
.\" 2011-03-04 JoungKyun Kim <htt://oops.org>
.\" $Id: o_getopt.3,v 1.11 2011-03-08 17:28:58 oops Exp $
.SH NAME
o_getopt \- Parse command-line options

.SH SYNOPSIS
.B #include <olibc/libarg.h>
.sp
.BI "o_getopt(int argc, char **argv, const char *opt, const struct o_option, *longopt);"

.SH Link library
.B \-loc
or
.B \-lolibc
.br

.B libolibc.so
and
.B libolibc.a
include
.B "LGPL2 symbols,"
so links this library, your object or binary is follows LGPL2.
If you don't need idn library and, don't want LGPL 2 effects,
use
.Bliboc.so
or
.B liboc.a
that follows BSD license.

.SH DESCRIPTION
The
.BI o_getopt()
api parses the command\-line arguments similarly
.BI getopt_long(3).
Its arguments argc and argv are the argument count
and array as passed to the main() function on program invocation.

After parsing,
.BI o_cmdarg
global array variable has rest arguments
in the order except the option and option value arguments.

Before call
.BI o_getopt(),
you need to initialize follow 2 variables.

.nf
_ogetopt_cmd_int = 0;
_ogetopt_chk_int = \-1;
.fi

After using variables of
.BI o_getopt(),
the o_cmdarg variable is deallocated with
.BI ofree_array() function.

If option has values, this value is saved on
.BI o_optarg
variable that size is 1024 byte and
.BI o_optlen
variable is allocated length of
.BI o_optarg variable.

.TP
.B argc
.br
Number of command\-line arguments

.TP
.B argv
.br
Array of command\-line arguments

.TP
.B opt
.br
The string containing the legitimate option characters. Same as 3th
argument of getopt_long. See also 'man 3 getopt_long'

.TP
.B longopt
.br
The pointer to the first element of an array of struct o_option declared
in <olibc/libarg.h>. This is same as 4th argument of getopt_long. See also
\'man 3 getopt_long\'
.br
.br
If you don't want to use longopt, you can set NULL.

structure of longopt is follows:

.nf
struct o_option {
    char *name;     // Name of long option
    int required    // flag of argument option value
    int value       // The value to return
};
.fi

For example, \-b options must have option value and, long options of \-b option
is \-\-best, you can set follows:

.nf
strcut o_option longopt[] = {
    { "best", required_arguments, 'b' }
};
.fi

If you set no_arguments on 2th argument, option value is none.

If you don't use long option, you can set NULL 4th argument of
.BI o_getopt().


.SH "RETURN VALUE"
Returns option character. If returns \-1, close to parse command\-line
arguments.

.SH EXAMPLE
.nf
The command\-line argument is follows:

.nf
/usr/bin/parse_getopt \-a arg1 \-b log
.fi

And \-b option don't have option value.

#include <olibc/libarg.h>

int main (int argc, char **argv) {
    int opt;
    char app[1024];
    int  bestopt = 0;

    static struct o_option longopt[] = {
        { "append", required_arguments, 'a' },
        { "best", no_arguments, 'b' },
        { 0, 0, 0 }
    };

    _ogetopt_cmd_int = 0;
    _ogetopt_chk_int = \-1;

    /* parsing command\-line arguments */
    while ( (opt = o_getopt (argc, argv, "a:b", longopt)) != \-1 ) {
       switch (opt) {
           case 'a' :
              if ( o_optlen > 0 ) {
                  strcpy (app, o_optarg);
              } else {
                  fprintf (stderr, "no argument with \-%c option\\n", opt);
                  ofree_arry (o_cmdarg);
                  exit (1);
              }
              break;
           case 'b' :
              bestopt = 1;
              break;
           default:
              fprintf (stderr, "usage: %s [\-a optarg|\-b] [log|conf]\\n", argv[0]);
              ofree_array (o_cmdarg);
              exit (1);
       }
    }

    /* confirm command\-line */
    if ( _ogetopt_cmd_int != 1 ) {
        fprintf (stderr, "usage: %s [\-a optarg|\-b] [log|conf]\\n", argv[0]);
        ofree_array (o_cmdarg);
        exit (1);
    }

    if ( ! strcmp (o_cmdarg[0], "log") ) {
        ....
    } else if ( ! strcmp (o_cmdarg[0], "conf") ) {
        ...
    } else {
        fprintf (stderr, "usage: %s [\-a optarg|\-b] [log|conf]\\n", argv[0]);
        exit (1);
    }


    /* must need */
    ofree_array (o_cmdarg);
}
.fi

.SH "SEE ALSO"
getopt(3), getopt_long(3), argv_make(3), ofree_array(3)

.SH AUTHOR
JoungKyun.Kim <http://oops.org>

.SH BUGS
Report to QnA bulletin board of http://oops.org
