.TH argv_make(3) 2011-03-09 "Linux Manpage" "OOPS Library's Manual"
.\" Process with
.\" nroff -man argv_make.3
.\" 2011-03-09 JoungKyun Kim <htt://oops.org>
.\" $Id$
.SH NAME
argv_make \- Make string array with the input string using white space delimiters

.SH SYNOPSIS
.B #include <olibc/libarg.h>
.sp
.BI "char ** argv_make (const char * stream, int * argc);"

.SH Link library
.B \-loc
or
.B \-lolibc
.br

.B libolibc.so
and
.B libolibc.a
include
.B "LGPL2 symbols,"
so links this library, your object or binary is follows LGPL2.
If you don't need idn library and, don't want LGPL 2 effects,
use
.B liboc.so
or
.B liboc.a
that follows BSD license.

.SH DESCRIPTION
The
.BI argv_make()
function make string array with white space ([ \\n\\t]) delimiters from
the input string. The last array element has NULL terminator.

The white space in the quoted string is preserved.

.TP
.BI stream
.br
The input string

.TP
.BI argc
.br
Pointer of string array

.SH "RETURN VALUE"
Pointer of string array. When occurs internal error, argv_make() returns null.
If the return string array pointer is not null, the caller should deallocate
this buffer using
.BI ofree_array()

.SH EXAMPLE
.nf
#include <olibc/libarg.h>

int main (void) {
    char * string = "arg1 arg2 arg3 \\"arg4 arg5\\"";
    char ** ary;
    char ** scan;
    int aryno, i;

    ary = argv_make (string, &aryno);

    printf ("## Number of array : %d\\n", aryno);

    for ( scan = ary, i=0; *scan != NULL; scan++, i++ ) {
        printf ("[%d] %s\\n", i, *scan);
    }

    ofree_array (ary);

    return 0;
}
.fi

.SH "SEE ALSO"
ofree_array(3)

.SH AUTHOR
JoungKyun.Kim <http://oops.org>

.SH BUGS
Please report bug on QnA bulletin board on http://oops.org/
