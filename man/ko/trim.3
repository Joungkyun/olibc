.TH trim(3) 2011-03-18 "Linux Manpage" "OOPS Library's Manual"
.\" Process with
.\" nroff -man trim.3
.\" 2011-03-18 JoungKyun Kim <htt://oops.org>
.\" $Id$
.SH 이름
trim \- 앞뒤의 공백을 제거
.br
trim_r

.SH 사용법
.B #include <olibc/libstring.h>
.sp
.BI "void trim (char * str);"
.br
.BI "char * trim_r (char * str, bool should_free);"

.SH 라이브러리 링크
.B \-loc
or
.B \-lolibc
.br

.B libolibc.so
또는
.B libolibc.a
에는
.BI "LGPL2 symbol"
이 포함되어 있으므로 이 라이브러리를
링크하려면 LGPL2의 영향을 받는다. idn관련 api를 사용하지 않고,
BSD 라이센스의 적용을 원한다면
.B liboc.so
나
.B liboc.a
를 이용해야 한다.

.SH 설명
문자열 앞/뒤의 공백문자를 제거한다.

.B php
의
.BI trim()
함수와 동일하게 작동을 하지만, 값을 리턴하지는 않는다. void 형으로
작동을 하며, perl 의 chomp 와 같이 호출을 하여 변경하고자 하는 변수
자체를 변경을 한다. 만약 변수 원형을 수정하고 싶지 않다면,
.BI trim_r()
api를 이용하도록 한다.

.TP
.B str
.br
공백 문자를 제거할 문자열을 지정한다. 단, 이 인자는 반드시 메모리
할당이 되어 있어야만 한다.

.TP
.B should_free (trim_r() only)
.br
str의 메모리를
.BI trim_r()
내부에서 해제를 할 것인지 여부를 결정한다. 1로 결정을 하면 내부
수행 후 str의 메모리를 해제한다.

.SH 반환값
.BI trim()
api는 반환값이 없으며,
.BI trim_r()
api는 앞뒤 공백이 제거된 문자열 포인터가 반환된다.
.BI timr_r()
api 내부에서 에러가 발생하면 null을 반환을 한다. 반환값이 null이
아닐 경우, 반드시 반환값의 메모리를
.BI free()
api로 해제해 주어야 한다.

.SH 예제
.nf
#include <olibc/libstring.h>

int main (void) {
    char *str;

    str = malloc (sizeof (char) * 32);
    strcpy (str, "   asdf   ");

    /* str 변수의 앞/뒤 공백을 삭제 */
    trim (str);
    printf ("%s\\n", str);

    free (str);
    return 0;
}
.fi

.B 다음의 예제는 잘못된 사용이다.

.nf
#include <olibc/libstring.h>

int main (void) {
    char * str = "    asdf    ";

    /* str 변수에 메모리 할당이 되어 있지 않다 */
    trim (str);
    printf ("%s\\n", str);

    return 0;
}
.fi

.SH 작성
김정균 <http://oops.org>

.SH 버그
버그가 발견이 되면 http://oops.org 로 리포팅을 부탁한다.
