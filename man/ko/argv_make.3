.TH argv_make(3) 2011-03-09 "Linux Manpage" "OOPS Library's Manual"
.\" Process with
.\" nroff -man argv_make.3
.\" 2011-03-09 JoungKyun Kim <htt://oops.org>
.\" $Id$
.SH 이름
argv_make \- 공백문자를 구분자로 문자열 배열 생성

.SH 사용법
.B #include <olibc/libarg.h>
.sp
.BI "char ** argv_make (const char * stream, int * argc);"

.SH 라이브러리 링크
.B \-loc
or
.B \-lolibc
.br

.B libolibc.so
또는
.B libolibc.a
에는
.BI "LGPL2 symbol"
이 포함되어 있으므로 이 라이브러리를
링크하려면 LGPL2의 영향을 받는다. idn관련 api를 사용하지 않고, BSD
라이센스의 적용을 원한다면
.B liboc.so
나
.B liboc.a
를 이용해야 한다.

.SH 설명
문자열을 공백문자 [ \\n\\t] 를 기준으로 배열로 변환을 한다. 쉽게 command
line 의 명령행이 argv 변수로 되는 것과 동일하게 생각할 수 있다.

stream 은 입력할 문자열을 지정하며, argc 는 생성된 배열의 수가 반영이 된다.

.SH 반환값
성공시에 배열의 point가 반환이 되며, 실패시에 NULL이 반환된다. 생성된 배열은
ofree_array 함수로 메모리 해제를 해 주어야 한다.

.SH 예제
.nf
#include <olibc/libarg.h>

int main (void) {
    char * string = "arg1 arg2 arg3 \\"arg4 arg5\\"";
    char ** ary;
    char ** scan;
    int aryno, i;

    ary = argv_make (string, &aryno);

    printf ("## 생성된 배열의 수 : %d\\n", aryno);

    for ( scan = ary, i=0; *scan != NULL; scan++, i++ ) {
        printf ("[%d] %s\\n", i, *scan);
    }

    ofree_array (ary);

    return 0;
}
.fi

.SH 참고
ofree_array(3)

.SH 작성
김정균 <http://oops.org>

.SH 버그
버그가 발견이 되면 http://oops.org/ 로 리포팅을 부탁한다.
