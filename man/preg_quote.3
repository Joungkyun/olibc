.TH preg_quote(3) 2011-03-18 "Linux Manpage" "OOPS Library's Manual"
.\" Process with
.\" nroff -man preg_quote.3
.\" 2011-03-18 JoungKyun Kim <htt://oops.org>
.\" $Id$
.SH NAME
preg_quote \- Quote regular expression characters

.SH SYNOPSIS
.B #include <olibc/libpcre.h>
.sp
.BI "char * preg_quote (const char * src, const char * delimiters);"

.SH "Link library"
.B \-loc
or
.B \-lolibc
.br

.B libolibc.so
and
.B libolibc.a
include
.B "LGPL2 symbols,"
so links this library, your object or binary is follows LGPL2.
If you don't need idn library and, don't want LGPL 2 effects,
use
.B liboc.so
or
.B liboc.a
that follows BSD license.

.SH DESCRIPTION
.BI preg_quote()
takes src parameter and puts a backslash in front of every
character that is part of the regular expression syntax.
This is useful if you have a run-time string that you need
to match in some text and the string may contain special
regex characters.

.TP
The special regular expression characters are:
.br
.B . \\\\ + * ? [ ^ ] $ ( ) { } = ! < > | : \-

.TP
.B src
.br
The input string.

.TP
.B delimiters
.br
If not null, these characters will also be escaped. This is
useful for escaping the delimiter that is required by the
PCRE functions. The '/' is the most commonly used delimiter.

.SH "RETURN VALUE"
Character pointer of the quoted strig. When occurs internal error,
.BI preg_quote()
returns null. If the return string array pointer is not null,
the caller should deallocate this buffer using
.BI free().

.SH EXAMPLE
.nf
#include <olibc/libpcre.h>

int mian (void) {
    char *regex;
    char *buf;
    char *string = "asdf/asfd";

    buf = preg_quote (string, "/");
    regex = malloc ( sizeof (char) * ( strlen(buf) + 3 ));
    sprintf (regex, "/%s/", buf);

    printf ("%s\\n", preg_replace(regex, "!!", "aaasdf/asdfbb"));

    free (buf);
    free (regex);

    return 0;
}
.fi

.SH AUTHOR
JoungKyun.Kim <http://oops.org>

.SH BUGS
Please report bug on QnA bulletin board on http://oops.org/
