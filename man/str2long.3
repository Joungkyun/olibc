.TH str2long(3) 2011-03-18 "Linux Manpage" "OOPS Library's Manual"
.\" Process with
.\" nroff -man str2long.3
.\" 2011-03-18 JoungKyun Kim <htt://oops.org>
.\" $Id$
.SH NAME
str2long \- convert to 64bit integer from string
.br
str2double \- convert to double integer from string

.SH SYNOPSIS
.B #include <olibc/libstring.h>
.sp
.BI "long long str2long (const char * src);"
.br
.BI "long double str2double (const char * str);"

.SH "Link library"
.B \-loc
or
.B \-lolibc
.br

.B libolibc.so
and
.B libolibc.a
include
.B "LGPL2 symbols,"
so links this library, your object or binary is follows LGPL2.
If you don't need idn library and, don't want LGPL 2 effects,
use
.B liboc.so
or
.B liboc.a
that follows BSD license.

.SH DESCRIPTION
The
.BI str2long()
aip conveted string of numeric type to 64bit integer. If system
support
.BI strtoll(),
the
.BI str2long()
api use
.BI strtoll().

The
.BI str2double()
api conveted string of double numeric type to integer that
casted double integer.

.TP
.B src
.br
The input numeric string.

.SH "RETURN VALUE"
64bit integer and double integer

.SH EXAMPLE
.nf
#include <olibc/libstring.h>

int main (void) {
    char *buf = "1234567890123456789";
    char *bufd = "1234567890123456789.1234";
    long long a = 0;
    long double b = 0;

    a = str2long (buf);
    b = str2double (bufd);

    printf ("%lld\\n", a);
    printf ("%Lf\\n", b);
    return 0;
}
.fi

.SH "SEE ALSO"
check_int(3) char2int(3)

.SH AUTHOR
JoungKyun.Kim <http://oops.org>

.SH BUGS
Please report bug on QnA bulletin board on http://oops.org/
