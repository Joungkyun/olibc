.TH human_size(3) 2011-03-18 "Linux Manpage" "OOPS Library's Manual"
.\" Process with
.\" nroff -man human_size.3
.\" 2011-03-18 JoungKyun Kim <htt://oops.org>
.\" $Id: human_size.3,v 1.7 2011-03-18 09:05:18 oops Exp $
.SH NAME
human_size \- convert number to human readable
.br
human_size_r

.SH SYNOPSIS
.B #include <olibc/libstring.h>
.sp
.BI "char * human_size (double size, int sub, int unit);"
.br
.BI "char * human_size_r (ULong64 size, bool sub, bool unit);"

.SH "Link library"
.B \-loc
or
.B \-lolibc
.br

.B libolibc.so
and
.B libolibc.a
include
.B "LGPL2 symbols,"
so links this library, your object or binary is follows LGPL2.
If you don't need idn library and, don't want LGPL 2 effects,
use
.B liboc.so
or
.B liboc.a
that follows BSD license.

.SH DESCRIPTION
.BI human_size()
ì™€
.BI human_size_r()
apis are convert to unit for human readable. The return value
support decimal porint under 2 digits.

Now, these apis are supported byte and bit unit.

.TP
.B size
.br
The input 64bit integer

.TP
.B sub
.br
Set 1, return with original size with 3 digit format.

.TP
.B unit
.br
Set 1, caculation with Byte, else with Bit.

.SH "RETURN VALUE"
strping pointer of formatted string by human read.

.BI humna_size()
api returns static memory, so it is not thread safe. If you
want to thread safe, use
.BI humna_size_r()
api.

When
.BI human_size_r()
api  occurs internal error,
.BI human_size_r() returns null. If the return string array
pointer is not null, the caller should deallocate this buffer
using
.BI free().

.SH EXAMPLE
.nf
#include <olibc/libstring.h>

int main (void) {
    double no = 123456789;
    char *data;

    printf ("%s\\n", human_size (no, 1, 0));

    data = human_size_r ((unsigned long long) no, 1, 0);
    printf ("%s\\n", data);
    if ( data != null )
        free (data);

    return 0;
}
.fi

.SH AUTHOR
JoungKyun.Kim <http://oops.org>

.SH BUGS
Please report bug on QnA bulletin board on http://oops.org/
