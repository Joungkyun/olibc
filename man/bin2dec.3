.TH bin2dec(3) 2011-03-10 "Linux Manpage" "OOPS Library's Manual"
.\" Process with
.\" nroff -man bin2dec.3
.\" 2011-03-10 JoungKyun Kim <htt://oops.org>
.\" $Id$
.SH NAME
bin2dec \- Convert binary string to 32bit integer
.br
bin2long \- Convert binary string to 64bit integer

.SH SYNOPSIS
.B #include <olibc/libstring.h>
.sp
.BI "Long32 bin2dec (const char * str)"
.br
.BI "Long64 bin2long (const char * str)"

.SH Link library
.B \-loc
or
.B \-lolibc
.br

.B libolibc.so
and
.B libolibc.a
include
.B "LGPL2 symbols,"
so links this library, your object or binary is follows LGPL2.
If you don't need idn library and, don't want LGPL 2 effects,
use
.B liboc.so
or
.B liboc.a
that follows BSD license.

.SH DESCRIPTION
The
.BI bin2dec()
and
.BI bin2long()
functions are convert binary numeric string to signed decimal integer.

The
.BI bin2dec()
function convert signed 32bit integer and, the
.BI bin2long()
function convert signed 64bit integer. The
.BI bin2long()
function caculate 64bit integer with high bit and low bit on 32bit system.
So for cleary 32bit range integer on 32bit system, use the
.BI bin2dec()
function.

.SH EXAMPLE
.nf
#include <olibc/libstring.h>

int main (void) {
    Long32 x = 0;
    Long64 v = 0;
    char * y = "11011000";
    char * w = "1001010100000010111110010000000000";

    x = bin2dec (y);
    v = bin2long (w);

    printf ("%u\\n", x);
    printf ("%llu\\n", v);

    return 0;
}
.fi

.SH "SEE ALSO"
hex2bin(3)

.SH AUTHOR
JoungKyun.Kim <http://oops.org>

.SH BUGS
Please report bug on QnA bulletin board on http://oops.org/
