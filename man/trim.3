.TH trim(3) 2011-03-18 "Linux Manpage" "OOPS Library's Manual"
.\" Process with
.\" nroff -man trim.3
.\" 2011-03-18 JoungKyun Kim <htt://oops.org>
.\" $Id$
.SH NAME
trim \- Remove white space on behind and forward on strings.
.br
trim_r

.SH SYNOPSIS
.B #include <olibc/libstring.h>
.sp
.BI "void trim (char * str);"
.br
.BI "char * trim_r (char * str, bool should_free);"

.SH "Link library"
.B \-loc
or
.B \-lolibc
.br

.B libolibc.so
and
.B libolibc.a
include
.B "LGPL2 symbols,"
so links this library, your object or binary is follows LGPL2.
If you don't need idn library and, don't want LGPL 2 effects,
use
.B liboc.so
or
.B liboc.a
that follows BSD license.

.SH DESCRIPTION
Remove white space on behind and forward on the input string.

.BI trim()
api trimed original source string, but
.BI trim_r()
api returns trimed string and original string is not changed.

.TP
.B str
.br
The input string. This is must allocated static memory.

.TP
.B should_free (trim_r() only)
.br
Set
.B true,
Should be freed memory of str argument.

.SH "RETURN VALUE"
The
.BI trim()
api has no return value.

.BI trim_r()
api returns pointer of trimed string. When occurs internal error,
.BI trim_r()
returns null. If the return string array pointer is not null,
the caller should deallocate this buffer using
.BI free().

.SH EXAMPLE
.nf
#include <olibc/libstring.h>

int main (void) {
    char *str;

    str = malloc (sizeof (char) * 32);
    strcpy (str, "   asdf   ");

    /* remove white space behind or after str variable */
    trim (str);
    printf ("%s\\n", str);

    free (str);
    return 0;
}
.fi

.B The follow sample is wrong.

.nf
#include <olibc/libstring.h>

int main (void) {
    char * str = "    asdf    ";

    /* str variable is dynamic allocated */
    trim (str);
    printf ("%s\\n", str);

    return 0;
}
.fi

.SH AUTHOR
JoungKyun.Kim <http://oops.org>

.SH BUGS
Please report bug on QnA bulletin board on http://oops.org/
