.TH bin2hex(3) 2011-03-13 "Linux Manpage" "OOPS Library's Manual"
.\" Process with
.\" nroff -man bin2hex.3
.\" 2011-03-13 JoungKyun Kim <htt://oops.org>
.\" $Id: bin2hex.3,v 1.6 2011-03-18 16:20:24 oops Exp $
.SH NAME
bin2hex \- Convert binary data into hexadecimal representation.
.br
bin2hex_r

.SH SYNOPSIS
.B #include <olibc/libstring.h>
.sp
.BI "char * bin2hex (const char * str);"
.sp
.BI "unsigned int bin2hex_r (const char * src, char ** dst);"

.SH Link library
.B \-loc
or
.B \-lolibc
.br

.B libolibc.so
and
.B libolibc.a
include
.B "LGPL2 symbols,"
so links this library, your object or binary is follows LGPL2.
If you don't need idn library and, don't want LGPL 2 effects,
use
.B liboc.so
or
.B liboc.a
that follows BSD license.

.SH DESCRIPTION
The
.BI bin2hex()
function converts binary string to hexadecimal string. The

The return value of
.BI bin2hex()
used static memory, so this function is not thread safe. If you want
thread safe, use
.BI bin2hex_r().
When
.BI bin2hex_r()
occurs internal error, 2th argument dst has null. If the 2th argument dst has string array pointer, the caller should deallocate this buffer using free()

.SH "RETURN VALUE"
bin2hex \- hexadecimal string
.br
bin2hex_r \- 32bit integer that length of converted input string.


.SH EXAMPLE
.nf
#include <olibc/libstring.h>

int main (void) {
    const char *src = "101100101110010011100100";
    char *dest;
    unsigned int len;

    dest = bin2hex (src);
    printf ("%s\\n", dest);

    len = bin2hex_r (src, &dest);
    printf ("%s (%d byte)\\n", dest, len);
    free (dest) // must need!

    src = "1011";
    printf ("%c\\n", _bin2hex (src));

    return 0;
}

.fi

.SH "SEE ALSO"
hex2bin(3), hex2bin_r(3), _hex2bin(3)

.SH AUTHOR
JoungKyun.Kim <http://oops.org>

.SH BUGS
Please report bug on QnA bulletin board on http://oops.org/
