.TH addslashes(3) 2011-03-09 "Linux Manpage" "OOPS C Library's Manual"
.\" Process with
.\" nroff -man addslashes.3
.\" 2011-03-09 JoungKyun Kim <htt://oops.org>
.\" $Id: addslashes.3,v 1.8 2011-03-16 11:35:16 oops Exp $
.SH NAME
addslashes \- Quote string with slashes

.SH SYNOPSIS
.B #include <olibc/libstring.h>
.sp
.BI "char * addslashes (char * in, bool should_free);"

.SH "Link library"
.B \-loc
or
.B \-lolibc
.br

.B libolibc.so
and
.B libolibc.a
include
.B "LGPL2 symbols,"
so links this library, your object or binary is follows LGPL2.
If you don't need idn library and, don't want LGPL 2 effects,
use
.B liboc.so
or
.B liboc.a
that follows BSD license.

.SH DESCRIPTION
Returns a string with backslashes before characters that need
to be quoted in database queries etc. These characters are single
 quote ('), double quote ("), backslash (\\).

This is not binary safe. If you want to binary safe, use
.B addslashes_r.

This function has same operation with addslashes() of PHP.

.TP
.B in
.br
The given string for qouting

.TP
.B should_free
.br
bool / set true, free memory of in argument into
.B addslashes().

.SH "RETURN VALUE"
The point of quoted string. When occurs internal error,
.B addslashes()
returns null. If the return string array pointer is not null, the caller should
deallocate this buffer using
.B free()

.SH EXAMPLE
.nf
#include <olibc/libstring.h>

int main (void) {
    char * buf;
    char * str;

    str = malloc (sizeof (char) * 32);
    strcpy (str, "abc'def'gh\\"ij\\"klmn");

    // free memory str variabl into addslashes()
    buf = addslashes (str, 1);
    printf ("%s\\n", buf);

    free (buf);

    return 0;
}
.fi

.SH "SEE ALSO"
addslashs_r(3)

.SH AUTHOR
JoungKyun.Kim <http://oops.org>

.SH BUGS
Please report bug on QnA bulletin board on http://oops.org/
