.TH addslashes(3) 2011-03-26 "Linux Manpage" "OOPS C Library's Manual"
.\" Process with
.\" nroff -man addslashes.3
.\" 2011-03-09 JoungKyun Kim <htt://oops.org>
.\" $Id$
.SH NAME
addslashes \- Quote string with slashes

.SH SYNOPSIS
.B #include <olibc/libstring.h>
.sp
.BI "bool addslashes (const char * in, size_t inlen, char ** out, size_t * outlen);"

.SH "Link library"
.B \-loc
or
.B \-lolibc
.br

.B libolibc.so
and
.B libolibc.a
include
.B "LGPL2 symbols,"
so links this library, your object or binary is follows LGPL2.
If you don't need idn library and, don't want LGPL 2 effects,
use
.B liboc.so
or
.B liboc.a
that follows BSD license.

.SH DESCRIPTION
Returns a string with backslashes before characters that need
to be quoted in database queries etc. These characters are single
 quote ('), double quote ("), backslash (\\) and NULL byte (\\0).

The NULL byte is convert to string '\\0'.

This is binary safe.

.TP
.B in
.br
The given string for qouting

.TP
.B inlen
.br
The length of
.B in
argument.

.TP
.B out
.br
Save converted string.

.TP
.B outlen
.br
Save length of converted string. This argument is set null, don't count
length of return string.

.SH "RETURN VALUE"
.B bool

When occurs internal error, 3th argument
.B out
of
.B addslashes()
has null. If the 3the argument
.B out
is not null, the caller should deallocate this buffer using
.B free()

.SH EXAMPLE
.nf
#include <olibc/libstring.h>

int main (void) {
    char * str;
    char * in;
    char * out;
    size_t outlen;

    str = malloc (sizeof (char) * 32);
    strcpy (str, "abc'def'gh\\"ij\\"klmn");

    // free memory str variabl into addslashes()
    if ( addslashes (str, strlen (str), &out, &outlen) != false ) {
    	printf ("%s\\n", out);
        free (out);
    }

    free (str);

    return 0;
}
.fi

.SH AUTHOR
JoungKyun.Kim <http://oops.org>

.SH BUGS
Please report bug on QnA bulletin board on http://oops.org/
